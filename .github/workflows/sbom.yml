name: Generate and push an SBOM dependency list

on:
  #push:
    # Only when tagging a new version which will be deployed
  #  tags:
  #    - '*'
  workflow_dispatch:

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  generate-and-push-sbom:
    runs-on: ubuntu-latest
    env: # $BUNDLE_GEMFILE must be set at the job level, so it is set for all steps
      BUNDLE_GEMFILE: ${{ github.workspace }}/hitobito/Gemfile

    steps:
      - name: 'Create default (hitobito) dir'
        run: |
          mkdir app

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: 'Extract branch name'
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: 'Extract wagon name'
        run: |
          repository=${{github.repository}}
          echo "WAGON_NAME=${repository##*/}" >> $GITHUB_ENV

      - name: 'Choose branch for dependencies'
        run: |
          echo "BRANCH_NAME: $BRANCH_NAME"
          HITOBITO_BRANCH=$([[ $BRANCH_NAME = 'stable' ]] && echo 'stable' || echo 'master')
          echo "HITOBITO_BRANCH=$HITOBITO_BRANCH" >> $GITHUB_ENV

      - name: 'Checkout hitobito'
        uses: actions/checkout@v2
        with:
          repository: 'hitobito/hitobito'
          ref: '${{ env.HITOBITO_BRANCH }}'
          path: 'hitobito'

      - name: 'Set up Ruby'
        env:
          ImageOS: ubuntu20
        uses: ruby/setup-ruby@v1
        with:
          working-directory: hitobito

      - name: 'Set up Node'
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: 'Setup OS'
        run: |
          sudo apt-get -qq update
          sudo apt-get install sphinxsearch
          echo "ruby version: $(ruby -v)"
          echo "node version: $(node -v)"
          echo "yarn version: $(yarn -v)"

      - name: 'Copy Wagonfile.ci'
        run: |
          cp -v Wagonfile.ci Wagonfile

      - name: 'Checkout dependency ${{ inputs.wagon_dependency_repository }}'
        uses: actions/checkout@v2
        if: ${{ inputs.wagon_dependency_repository != '' }}
        with:
          repository: hitobito/${{ inputs.wagon_dependency_repository }}
          ref: '${{ env.HITOBITO_BRANCH }}'
          path: ${{ inputs.wagon_dependency_repository }}

      - name: Checkout ${{ env.WAGON_NAME }}
        uses: actions/checkout@v2
        with:
          path: ${{ env.WAGON_NAME }}

      - uses: actions/cache@v2
        with:
          path: hitobito/vendor/bundle
          key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
          restore-keys: |
            ${{ runner.os }}-ruby-bundle-

      - uses: actions/cache@v2
        if: ${{ inputs.wagon_dependency_repository != '' }}
        with:
          path: ${{ inputs.wagon_dependency_repository }}/vendor/bundle
          key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
          restore-keys: |
            ${{ runner.os }}-ruby-bundle-

      - uses: actions/cache@v2
        with:
          path: ${{ env.WAGON_NAME }}/vendor/bundle
          key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
          restore-keys: |
            ${{ runner.os }}-ruby-bundle-

      - name: 'Bundle install core'
        run: |
          bundle install --jobs 4 --retry 3 --path vendor/bundle

      - name: 'Make changes to Gemfile.lock transparent'
        run: |
          git diff Gemfile.lock || true

      - name: 'Bundle install wagons'
        run: |
          hitobito_dir=$(realpath ./)
          for d in $hitobito_dir/../hitobito_*; do
            cd $d
            cp -v $hitobito_dir/Gemfile.lock ./
            bundle install --jobs 4 --retry 3 --path vendor/bundle
          done

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: 'Yarn install'
        run: |
          yarn install --frozen-lockfile

      - name: 'Generate SBOM for ruby dependencies and push to Dependency Track'
        run: |
          bundle install
          npm install -g @appthreat/cdxgen
          cdxgen -o ./sbom.xml -t ruby .
          curl --verbose -s --location --request POST ${{ secrets.DEPENDENCY_TRACK_URL }}/api/v1/bom \
          --header "X-Api-Key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}" \
          --header "Content-Type: multipart/form-data" \
          --form "autoCreate=true" \
          --form "projectName=${PROJECT_NAME:-$GITHUB_REPOSITORY}" \
          --form "projectVersion=${PROJECT_VERSION:-$GITHUB_REF}" \
          --form "bom=@sbom.xml"
        env:
          PROJECT_NAME: hitobito-jubla-backend
          PROJECT_VERSION: ${{ github.ref_name }}
        working-directory: hitobito

#      - name: Upload ruby SBOM (list of dependencies) to Dependency Track
#        uses: AppThreat/cdxgen-action@v1
#        with:
#          output: "./reports/bom.xml"
#          serverUrl: ${{ secrets.DEPENDENCY_TRACK_URL }}
#          apiKey: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}
#          project-name: hitobito-jubla-backend
#          project-version: ${{ github.ref_name }}
#          working-directory: hitobito
#
#      - name: Upload javascript SBOM (list of dependencies) to Dependency Track
#        uses: puzzle/action-owasp-dependecy-track-check@latest
#        with:
#          url: ${{ secrets.DEPENDENCY_TRACK_URL }}
#          key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}
#          language: yarn
#          project-name: hitobito-jubla-frontend
#          project-version: ${{ github.ref_name }}
#          working-directory: hitobito
